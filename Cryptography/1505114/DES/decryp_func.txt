
vi decryption(vi key, int row){
    /// Apply transpose PI[] to data ------------
    vi new_data = applyTransposition(ciphered[row] , PI , 64);
    vi Li (new_data.begin() , new_data.begin()+32);
    vi Ri (new_data.begin()+33 , new_data.begin()+64);
    
    /// Start iterations ----
    for (int i = 0; i < 16; i++)
    {
        outfile<<"\n.......... Starting = ";
        outfile<<i+1<<"th iteration ................\n\n";

        // outfile<<"\n--  circular Left shift key ------"<<endl;
        // vi temp = leftCircularRotate(key,i);

        // outfile<<"\n--  Apply transpose CP_2[] to key -----------------"<<endl;
        // vi new_key = applyTransposition(temp,CP_2,48);
        outfile<<"Key "<<i+1<<" : ";
        for (int j = 0; j < decrypt_key[15-i].size(); j++)
            outfile<<decrypt_key[15-i][j];
        
        outfile<<"\n-- Apply swap Li = Ri-1 -----------------"<<endl;
        if(i !=0){
            vi temp = Li;
            Ri = Li;
            Li = temp;
        }

        outfile<<"\n--  Apply transpose E[] to Ri-1 -----------------"<<endl;
        vi expanded = applyTransposition(Ri, E, 48);

        outfile<<"\n--  Apply XOR to ki and Ei -------------"<<endl;
        vi xor_ed = XOR(expanded,decrypt_key[15-i]);

        outfile<<"\n--  Apply transpose PI_2[] to New -----------------"<<endl;
        expanded.clear();
        expanded = applyTransposition(xor_ed , PI_2 , 32);

        outfile<<"\n--  Apply transpose P[] to New -----------------"<<endl;
        xor_ed.clear();
        xor_ed = applyTransposition(expanded,P,32);

        outfile<<"\n--  Apply XOR to Li-1 and New = Ri -----------------"<<endl;
        
        Ri = XOR(xor_ed , Ri);

    }
    
    /// Swap L and R of data ----
    vi temp = Li;
    Ri = Li;
    Li = temp;

    /// Apply transpose PI_1[] to data ---
    new_data.clear();
    for (int i = 0; i < 64; i++)
    {
        if(i<32)
            new_data.push_back(Li[i]);
        else
            new_data.push_back(Ri[i-32]);
    }
    Li.clear();
    Li = applyTransposition(new_data , PI_1 , 64);
        
    return Li;
}